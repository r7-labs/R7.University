--
--  01.08.00.SqlDataProvider
--
--  Author:
--       Roman M. Yagodin <roman.yagodin@gmail.com>
--
--  Copyright (c) 2016 Roman M. Yagodin
--
--  This program is free software: you can redistribute it and/or modify
--  it under the terms of the GNU Affero General Public License as published by
--  the Free Software Foundation, either version 3 of the License, or
--  (at your option) any later version.
--
--  This program is distributed in the hope that it will be useful,
--  but WITHOUT ANY WARRANTY; without even the implied warranty of
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
--  GNU Affero General Public License for more details.
--
--  You should have received a copy of the GNU Affero General Public License
--  along with this program.  If not, see <http://www.gnu.org/licenses/>.

-- NOTE: To manually execute this script you must 
-- replace {databaseOwner} and {objectQualifier} with real values. 
-- Defaults is "dbo." for database owner and "" for object qualifier 

-- Employees

IF NOT EXISTS (select * from sys.objects where object_id = object_id(N'FK_{objectQualifier}University_Employees_PhotoFile') and type in (N'F'))
BEGIN
    ALTER TABLE {databaseOwner}[{objectQualifier}University_Employees]
        ADD CONSTRAINT [FK_{objectQualifier}University_Employees_PhotoFile] FOREIGN KEY (PhotoFileID)
            REFERENCES {databaseOwner}[{objectQualifier}Files](FileId) ON DELETE SET NULL
END
GO

IF NOT EXISTS (select * from sys.columns where object_id = object_id(N'{databaseOwner}[{objectQualifier}University_Employees]') and name = N'StartDate')
BEGIN
    ALTER TABLE {databaseOwner}[{objectQualifier}University_Employees]
        ADD [StartDate] datetime NULL,
        [EndDate] datetime NULL
END 
GO

IF EXISTS (select * from sys.objects where object_id = object_id(N'DF_{objectQualifier}University_Employees_IsPublished') and type in (N'D'))
BEGIN
    ALTER TABLE {databaseOwner}[{objectQualifier}University_Employees]
        DROP CONSTRAINT [DF_{objectQualifier}University_Employees_IsPublished]
END
GO

IF EXISTS (select * from sys.columns where object_id = object_id(N'{databaseOwner}[{objectQualifier}University_Employees]') and name = N'IsPublished')
BEGIN
    UPDATE {databaseOwner}[{objectQualifier}University_Employees] SET EndDate = CONVERT(date, GETDATE()) WHERE [IsPublished] = 0
    ALTER TABLE {databaseOwner}[{objectQualifier}University_Employees]
        DROP COLUMN [IsPublished]
END
GO

-- EduPrograms

IF EXISTS (select * from sys.columns where object_id = object_id(N'{databaseOwner}[{objectQualifier}University_EduPrograms]') and name = N'AccreditedToDate')
BEGIN
    ALTER TABLE {databaseOwner}[{objectQualifier}University_EduPrograms]
        DROP COLUMN [AccreditedToDate]
END
GO

-- Documents

IF NOT EXISTS (select * from sys.columns where object_id = object_id(N'{databaseOwner}[{objectQualifier}University_Documents]') and name = N'Group')
BEGIN
    ALTER TABLE {databaseOwner}[{objectQualifier}University_Documents]
        ADD [Group] nvarchar (255) NULL
    ALTER TABLE {databaseOwner}[{objectQualifier}University_Documents]
        ALTER COLUMN [DocumentTypeID] int NOT NULL
   
END
GO

IF EXISTS (select * from sys.objects where object_id = object_id(N'FK_{objectQualifier}University_Documents_DocumentTypes') and type in (N'F'))
BEGIN
    ALTER TABLE {databaseOwner}[{objectQualifier}University_Documents]
        DROP CONSTRAINT [FK_{objectQualifier}University_Documents_DocumentTypes]
    ALTER TABLE {databaseOwner}[{objectQualifier}University_Documents]
        ADD CONSTRAINT [FK_{objectQualifier}University_Documents_DocumentTypes] FOREIGN KEY (DocumentTypeID)
            REFERENCES {databaseOwner}[{objectQualifier}University_DocumentTypes] (DocumentTypeID) ON DELETE NO ACTION
END
GO

IF EXISTS (select * from sys.objects where object_id = object_id(N'FK_{objectQualifier}University_EduPrograms_EduLevels') and type in (N'F'))
BEGIN
    ALTER TABLE {databaseOwner}[{objectQualifier}University_EduPrograms]
        DROP CONSTRAINT [FK_{objectQualifier}University_EduPrograms_EduLevels]
    ALTER TABLE {databaseOwner}[{objectQualifier}University_EduPrograms]
        ADD CONSTRAINT [FK_{objectQualifier}University_EduPrograms_EduLevels] FOREIGN KEY (EduLevelID)
            REFERENCES {databaseOwner}[{objectQualifier}University_EduLevels] (EduLevelID) ON DELETE NO ACTION
END
GO

IF EXISTS (select * from sys.objects where object_id = object_id(N'FK_{objectQualifier}University_EduProgramProfiles_EduPrograms') and type in (N'F'))
BEGIN
    ALTER TABLE {databaseOwner}[{objectQualifier}University_EduProgramProfiles]
        DROP CONSTRAINT [FK_{objectQualifier}University_EduProgramProfiles_EduPrograms]
    ALTER TABLE {databaseOwner}[{objectQualifier}University_EduProgramProfiles]
        ADD CONSTRAINT [FK_{objectQualifier}University_EduProgramProfiles_EduPrograms] FOREIGN KEY (EduProgramID)
            REFERENCES {databaseOwner}[{objectQualifier}University_EduPrograms] (EduProgramID) ON DELETE NO ACTION
END
GO

-- DocumentTypes

IF NOT EXISTS (select * from {databaseOwner}[{objectQualifier}University_DocumentTypes] where type = N'ProfStandard')
BEGIN
    -- must be same as SystemDocumentType enum members
    INSERT INTO {databaseOwner}[{objectQualifier}University_DocumentTypes] (Type, IsSystem) VALUES
        (N'ProfStandard', 1)
END
GO

-- Drop views

IF EXISTS (select * from sys.objects where object_id = object_id(N'{databaseOwner}[{objectQualifier}vw_University_EduProgramProfiles]') and type in (N'V'))
    DROP VIEW {databaseOwner}[{objectQualifier}vw_University_EduProgramProfiles]
GO

IF EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}vw_University_EmployeesMaxWeight]') and OBJECTPROPERTY(id, N'IsView') = 1)
    DROP VIEW {databaseOwner}[{objectQualifier}vw_University_EmployeesMaxWeight]
GO

-- Create views

CREATE VIEW {databaseOwner}[{objectQualifier}vw_University_EmployeesMaxWeight] AS
    SELECT E.EmployeeID, MAX(P.Weight) AS MaxWeight
        FROM {databaseOwner}[{objectQualifier}University_Employees] AS E 
        INNER JOIN {databaseOwner}[{objectQualifier}University_OccupiedPositions] AS OP 
            ON E.EmployeeID = OP.EmployeeID 
        INNER JOIN {databaseOwner}[{objectQualifier}University_Positions] AS P 
            ON OP.PositionID = P.PositionID
    GROUP BY E.EmployeeID
GO

-- Drop existing stored procedures

IF EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}University_FindEmployees]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
    DROP PROCEDURE {databaseOwner}[{objectQualifier}University_FindEmployees]
GO

IF EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}University_GetEmployeesByDivisionID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
    DROP PROCEDURE {databaseOwner}[{objectQualifier}University_GetEmployeesByDivisionID]
GO

-- drop sp with new name also
IF EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}University_GetEmployees_ByDivisionID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
    DROP PROCEDURE {databaseOwner}[{objectQualifier}University_GetEmployees_ByDivisionID]
GO

IF EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}University_GetRecursiveEmployeesByDivisionID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
    DROP PROCEDURE {databaseOwner}[{objectQualifier}University_GetRecursiveEmployeesByDivisionID]
GO

-- drop sp with new name also
IF EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}University_GetEmployees_ByDivisionID_Recursive]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
    DROP PROCEDURE {databaseOwner}[{objectQualifier}University_GetEmployees_ByDivisionID_Recursive]
GO

IF EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}University_GetHeadEmployee]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
    DROP PROCEDURE {databaseOwner}[{objectQualifier}University_GetHeadEmployee]
GO

-- Create stored procedures

CREATE PROCEDURE {databaseOwner}[{objectQualifier}University_FindEmployees]
    @searchText nvarchar (50),
    @teachersOnly bit,
    -- TODO: Remove @includeSubdivisions as obsolete, should always be 1
    @includeSubdivisions bit,
    @divisionId int = -1
AS
DECLARE
    @searchPattern nvarchar (100)
BEGIN
    -- SET NOCOUNT ON added to prevent extra result sets from
    -- interfering with SELECT statements.
    SET NOCOUNT ON;

    SET @searchPattern = N'%' + @searchText + '%';
    
    IF (@divisionId <> -1 AND @includeSubdivisions = 1)
    BEGIN
        SELECT E.* FROM (
            SELECT EW.EmployeeID, MAX (EW.MaxWeight) AS MaxWeight 
            FROM {databaseOwner}[{objectQualifier}University_DivisionsHierarchy](@divisionId) AS DH
                INNER JOIN {databaseOwner}[{objectQualifier}vw_University_OccupiedPositions] AS VOP
                    ON DH.DivisionID = VOP.DivisionID
                INNER JOIN {databaseOwner}[{objectQualifier}vw_University_EmployeesMaxWeight] AS EW
                    ON EW.EmployeeID = VOP.EmployeeID 
            WHERE VOP.IsTeacher = 1 OR @teachersOnly = 0
            GROUP BY EW.EmployeeID
        ) AS DE INNER JOIN {databaseOwner}[{objectQualifier}University_Employees] AS E ON DE.EmployeeID = E.EmployeeID 
        WHERE (LEN (@searchText) = 0 -- could be empty
              OR E.FirstName + ' ' + E.LastName + ' ' + E.OtherName LIKE @searchPattern
              OR E.Email LIKE @searchPattern OR E.SecondaryEmail LIKE @searchPattern
              OR E.Phone LIKE @searchPattern OR E.CellPhone LIKE @searchPattern 
              OR E.WorkingPlace LIKE @searchPattern)
        -- Sort by max weight of all employee positions
        ORDER BY DE.MaxWeight DESC, E.LastName; 
    END
    ELSE
    BEGIN
        SELECT E.* FROM (
            SELECT EW.EmployeeID, MAX (EW.MaxWeight) AS MaxWeight 
            FROM {databaseOwner}[{objectQualifier}vw_University_EmployeesMaxWeight] AS EW
                INNER JOIN {databaseOwner}[{objectQualifier}vw_University_OccupiedPositions] AS VOP
                    ON EW.EmployeeID = VOP.EmployeeID
            WHERE (VOP.DivisionID = @divisionId OR @divisionId = -1)
                AND (VOP.IsTeacher = 1 OR @teachersOnly = 0)
            GROUP BY EW.EmployeeID
        ) AS EI INNER JOIN {databaseOwner}[{objectQualifier}University_Employees] AS E ON EI.EmployeeID = E.EmployeeID
        WHERE (E.FirstName + ' ' + E.LastName + ' ' + E.OtherName LIKE @searchPattern
              OR E.Email LIKE @searchPattern OR E.SecondaryEmail LIKE @searchPattern 
              OR E.Phone LIKE @searchPattern OR E.CellPhone LIKE @searchPattern 
              OR E.WorkingPlace LIKE @searchPattern)
        -- Sort by max weight of all employee positions
        ORDER BY EI.MaxWeight DESC, E.LastName;
    END
END
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}University_GetEmployees_ByDivisionID] 
    @divisionId int,
    @sortType int,
    @weightMod int = 10
AS
BEGIN
    -- SET NOCOUNT ON added to prevent extra result sets from
    -- interfering with SELECT statements.
    SET NOCOUNT ON;
        
    IF (@sortType = 1)
    BEGIN
        -- Sort by total (summary) weight of all employee positions
        SELECT DE.* FROM (
            SELECT DISTINCT E.*, EW.TotalWeight 
                FROM {databaseOwner}[{objectQualifier}University_Employees] AS E 
                    INNER JOIN {databaseOwner}[{objectQualifier}University_OccupiedPositions] AS OP
                        ON E.EmployeeID = OP.EmployeeID 
                    INNER JOIN {databaseOwner}[{objectQualifier}vw_University_EmployeesTotalWeight] AS EW
                        ON E.EmployeeID = EW.EmployeeID
            WHERE OP.DivisionID = @divisionId
        ) AS DE
        ORDER BY DE.TotalWeight DESC, DE.LastName;
    END
    ELSE IF (@sortType = 2)
    BEGIN
        -- Sort by employee lastname, then firstname
        SELECT DISTINCT E.*
            FROM {databaseOwner}[{objectQualifier}University_Employees] AS E 
                INNER JOIN {databaseOwner}[{objectQualifier}University_OccupiedPositions] AS OP
                    ON E.EmployeeID = OP.EmployeeID 
            WHERE OP.DivisionID = @divisionId
        ORDER BY E.LastName
    END
    ELSE -- IF (@sortType = 0)
    BEGIN
        -- Sort by max weight of all employee positions (by default)
        SELECT E.* FROM (
            SELECT EW.EmployeeID, 
                -- Add some weight to prime positions in the current division
                MAX (EW.MaxWeight + CASE WHEN (OP.DivisionID = @divisionId AND OP.IsPrime = 1) THEN @weightMod ELSE 0 END) AS MaxWeight
                FROM {databaseOwner}[{objectQualifier}vw_University_EmployeesMaxWeight] AS EW
                    INNER JOIN {databaseOwner}[{objectQualifier}University_OccupiedPositions] AS OP
                        ON EW.EmployeeID = OP.EmployeeID 
            WHERE OP.DivisionID = @divisionId
            GROUP BY EW.EmployeeID
        ) AS DE INNER JOIN {databaseOwner}[{objectQualifier}University_Employees] AS E ON DE.EmployeeID = E.EmployeeID 
        ORDER BY DE.MaxWeight DESC, E.LastName;
    END
END
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}University_GetEmployees_ByDivisionID_Recursive] 
    @divisionId int,
    @sortType int,
    @weightMod int = 10
AS
BEGIN
    -- SET NOCOUNT ON added to prevent extra result sets from
    -- interfering with SELECT statements.
    SET NOCOUNT ON;

    IF (@sortType = 1)
    BEGIN
        SELECT DE.* FROM (
            SELECT DISTINCT E.*, EW.TotalWeight 
                FROM {databaseOwner}[{objectQualifier}University_DivisionsHierarchy](@divisionId) AS DH
                    INNER JOIN {databaseOwner}[{objectQualifier}University_OccupiedPositions]   AS OP
                        ON DH.DivisionID = OP.DivisionID
                    INNER JOIN {databaseOwner}[{objectQualifier}.University_Employees] AS E 
                        ON E.EmployeeID = OP.EmployeeID 
                    INNER JOIN {databaseOwner}[{objectQualifier}vw_University_EmployeesTotalWeight] AS EW
                        ON E.EmployeeID = EW.EmployeeID
        ) AS DE
        ORDER BY DE.TotalWeight DESC, DE.LastName;
    END
    ELSE IF (@sortType = 2)
    BEGIN
        -- Sort by employee lastname, then firstname
        SELECT DISTINCT E.*
            FROM {databaseOwner}[{objectQualifier}University_DivisionsHierarchy](@divisionId) AS DH
                INNER JOIN {databaseOwner}[{objectQualifier}University_OccupiedPositions] AS OP
                    ON DH.DivisionID = OP.DivisionID
                INNER JOIN {databaseOwner}[{objectQualifier}University_Employees] AS E 
                    ON E.EmployeeID = OP.EmployeeID
            WHERE OP.DivisionID = @divisionId
        ORDER BY E.LastName;
    END
    ELSE -- IF (@sortType = 0)
    BEGIN
        -- Sort by max weight of all employee positions (by default)
        SELECT E.* FROM (
            SELECT EW.EmployeeID, 
                -- Add some weight to prime positions in the current division
                MAX (EW.MaxWeight + CASE WHEN (OP.DivisionID = @divisionId AND OP.IsPrime = 1) THEN @weightMod ELSE 0 END) AS MaxWeight
                FROM {databaseOwner}[{objectQualifier}University_DivisionsHierarchy](@divisionId) AS DH
                    INNER JOIN {databaseOwner}[{objectQualifier}University_OccupiedPositions] AS OP
                        ON DH.DivisionID = OP.DivisionID
                    INNER JOIN {databaseOwner}[{objectQualifier}vw_University_EmployeesMaxWeight] AS EW
                        ON EW.EmployeeID = OP.EmployeeID 
            GROUP BY EW.EmployeeID
        ) AS DE INNER JOIN {databaseOwner}[{objectQualifier}University_Employees] AS E ON DE.EmployeeID = E.EmployeeID 
        ORDER BY DE.MaxWeight DESC, E.LastName;
    END
END
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}University_GetHeadEmployee]
    @divisionId int,
    @headPositionId int
AS
BEGIN
    -- SET NOCOUNT ON added to prevent extra result sets from
    -- interfering with SELECT statements.
    SET NOCOUNT ON;

    SELECT E.* FROM {databaseOwner}[{objectQualifier}University_Employees] AS E 
        INNER JOIN {databaseOwner}[{objectQualifier}University_OccupiedPositions] AS EOP
            ON E.EmployeeID = EOP.EmployeeID 
        WHERE EOP.DivisionID = @divisionId AND EOP.PositionID = @headPositionId
END
GO
