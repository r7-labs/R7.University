--
--  01.01.03.SqlDataProvider
--
--  Author:
--       Roman M. Yagodin <roman.yagodin@gmail.com>
--
--  Copyright (c) 2014 Roman M. Yagodin
--
--  This program is free software: you can redistribute it and/or modify
--  it under the terms of the GNU Affero General Public License as published by
--  the Free Software Foundation, either version 3 of the License, or
--  (at your option) any later version.
--
--  This program is distributed in the hope that it will be useful,
--  but WITHOUT ANY WARRANTY; without even the implied warranty of
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
--  GNU Affero General Public License for more details.
--
--  You should have received a copy of the GNU Affero General Public License
--  along with this program.  If not, see <http://www.gnu.org/licenses/>.

-- NOTE: To manually execute this script you must 
-- replace {databaseOwner} and {objectQualifier} with real values. 
-- Defaults is "dbo." for database owner and "" for object qualifier 

-- Drop existing views

IF EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}vw_University_OccupiedPositions]') and OBJECTPROPERTY(id, N'IsView') = 1)
	DROP VIEW {databaseOwner}[{objectQualifier}vw_University_OccupiedPositions]
GO

-- Create views

CREATE VIEW {databaseOwner}[{objectQualifier}vw_University_OccupiedPositions] AS
	SELECT OP.*, P.ShortTitle AS PositionShortTitle, 
		D.ShortTitle AS DivisionShortTitle, P.Title AS PositionTitle, D.Title AS DivisionTitle, 
		P.Weight AS PositionWeight, P.IsTeacher, D.ParentDivisionID, 
		D.HomePage
	FROM {databaseOwner}[{objectQualifier}University_OccupiedPositions] AS OP
		INNER JOIN {databaseOwner}[{objectQualifier}University_Positions] AS P 
			ON OP.PositionID = P.PositionID 
		INNER JOIN {databaseOwner}[{objectQualifier}University_Divisions] AS D 
			ON OP.DivisionID = D.DivisionID
GO	

-- Drop existing stored procedures

IF EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}University_FindEmployees]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}[{objectQualifier}University_FindEmployees]
GO

IF EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}University_GetEmployeesByDivisionID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}[{objectQualifier}University_GetEmployeesByDivisionID]
GO

IF EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}University_GetRecursiveEmployeesByDivisionID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}[{objectQualifier}University_GetRecursiveEmployeesByDivisionID]
GO

-- Create stored procedures

CREATE PROCEDURE {databaseOwner}[{objectQualifier}University_FindEmployees]
	@searchText nvarchar (50),
	@includeNonPublished bit,
	@teachersOnly bit,
	@includeSubdivisions bit,
	@divisionId int = -1
AS
DECLARE
	@searchPattern nvarchar (100)
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	SET @searchPattern = N'%' + @searchText + '%';
	
	IF (@divisionId <> -1 AND @includeSubdivisions = 1)
	BEGIN
		SELECT E.* FROM (
			SELECT EW.EmployeeID, MAX (EW.MaxWeight) AS MaxWeight 
			FROM {databaseOwner}[{objectQualifier}University_DivisionsHierarchy](@divisionId) AS DH
				INNER JOIN {databaseOwner}[{objectQualifier}vw_University_OccupiedPositions] AS VOP
					ON DH.DivisionID = VOP.DivisionID
				INNER JOIN {databaseOwner}[{objectQualifier}vw_University_EmployeesMaxWeight] AS EW
					ON EW.EmployeeID = VOP.EmployeeID 
			WHERE (EW.IsPublished = 1 OR @includeNonPublished = 1)
				AND (VOP.IsTeacher = 1 OR @teachersOnly = 0)
			GROUP BY EW.EmployeeID
		) AS DE INNER JOIN {databaseOwner}[{objectQualifier}University_Employees] AS E ON DE.EmployeeID = E.EmployeeID 
		WHERE (LEN (@searchText) = 0 -- could be empty
			  OR E.FirstName + ' ' + E.LastName + ' ' + E.OtherName LIKE @searchPattern
			  OR E.Email LIKE @searchPattern OR E.SecondaryEmail LIKE @searchPattern
			  OR E.Phone LIKE @searchPattern OR E.CellPhone LIKE @searchPattern 
			  OR E.WorkingPlace LIKE @searchPattern)
		-- Sort by max weight of all employee positions
		ORDER BY DE.MaxWeight DESC, E.LastName;	
	END
	ELSE
	BEGIN
		SELECT E.* FROM (
			SELECT EW.EmployeeID, MAX (EW.MaxWeight) AS MaxWeight 
			FROM {databaseOwner}[{objectQualifier}vw_University_EmployeesMaxWeight] AS EW
				INNER JOIN {databaseOwner}[{objectQualifier}vw_University_OccupiedPositions] AS VOP
					ON EW.EmployeeID = VOP.EmployeeID
			WHERE (EW.IsPublished = 1 OR @includeNonPublished = 1)
				AND (VOP.DivisionID = @divisionId OR @divisionId = -1)
				AND (VOP.IsTeacher = 1 OR @teachersOnly = 0)
			GROUP BY EW.EmployeeID
		) AS EI INNER JOIN {databaseOwner}[{objectQualifier}University_Employees] AS E ON EI.EmployeeID = E.EmployeeID
		WHERE (E.FirstName + ' ' + E.LastName + ' ' + E.OtherName LIKE @searchPattern
			  OR E.Email LIKE @searchPattern OR E.SecondaryEmail LIKE @searchPattern 
			  OR E.Phone LIKE @searchPattern OR E.CellPhone LIKE @searchPattern 
			  OR E.WorkingPlace LIKE @searchPattern)
		-- Sort by max weight of all employee positions
		ORDER BY EI.MaxWeight DESC, E.LastName;
	END
END
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}University_GetEmployeesByDivisionID] 
	@divisionId int,
	@sortType int,
	@includeNonPublished bit,
	@weightMod int = 10
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
		
	IF (@sortType = 1)
	BEGIN
		-- Sort by total (summary) weight of all employee positions
		SELECT DE.* FROM (
			SELECT DISTINCT E.*, EW.TotalWeight 
				FROM {databaseOwner}[{objectQualifier}University_Employees] AS E 
					INNER JOIN {databaseOwner}[{objectQualifier}University_OccupiedPositions] AS OP
						ON E.EmployeeID = OP.EmployeeID 
					INNER JOIN {databaseOwner}[{objectQualifier}vw_University_EmployeesTotalWeight] AS EW
						ON E.EmployeeID = EW.EmployeeID
			WHERE OP.DivisionID = @divisionId AND (E.IsPublished = 1 OR @includeNonPublished = 1) 
		) AS DE
		ORDER BY DE.TotalWeight DESC, DE.LastName;
	END
	ELSE IF (@sortType = 2)
	BEGIN
		-- Sort by employee lastname, then firstname
		SELECT DISTINCT E.*
			FROM {databaseOwner}[{objectQualifier}University_Employees] AS E 
				INNER JOIN {databaseOwner}[{objectQualifier}University_OccupiedPositions] AS OP
					ON E.EmployeeID = OP.EmployeeID 
			WHERE OP.DivisionID = @divisionId AND (E.IsPublished = 1 OR @includeNonPublished = 1) 
		ORDER BY E.LastName
	END
	ELSE -- IF (@sortType = 0)
	BEGIN
		-- Sort by max weight of all employee positions (by default)
		SELECT E.* FROM (
			SELECT EW.EmployeeID, 
				-- Add some weight to prime positions in the current division
				MAX (EW.MaxWeight + CASE WHEN (OP.DivisionID = @divisionId AND OP.IsPrime = 1) THEN @weightMod ELSE 0 END) AS MaxWeight
				FROM {databaseOwner}[{objectQualifier}vw_University_EmployeesMaxWeight] AS EW
					INNER JOIN {databaseOwner}[{objectQualifier}University_OccupiedPositions] AS OP
						ON EW.EmployeeID = OP.EmployeeID 
			WHERE OP.DivisionID = @divisionId  AND (EW.IsPublished = 1 OR @includeNonPublished = 1) 
			GROUP BY EW.EmployeeID
		) AS DE INNER JOIN {databaseOwner}[{objectQualifier}University_Employees] AS E ON DE.EmployeeID = E.EmployeeID 
		ORDER BY DE.MaxWeight DESC, E.LastName;
	END
END
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}University_GetRecursiveEmployeesByDivisionID] 
	-- Add the parameters for the stored procedure here
	@divisionId int,
	@sortType int,
	@includeNonPublished bit,
	@weightMod int = 10
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	IF (@sortType = 1)
	BEGIN
		SELECT DE.* FROM (
			SELECT DISTINCT E.*, EW.TotalWeight 
				FROM {databaseOwner}[{objectQualifier}University_DivisionsHierarchy](@divisionId) AS DH
					INNER JOIN {databaseOwner}[{objectQualifier}University_OccupiedPositions]	AS OP
						ON DH.DivisionID = OP.DivisionID
					INNER JOIN {databaseOwner}[{objectQualifier}.University_Employees] AS E 
						ON E.EmployeeID = OP.EmployeeID 
					INNER JOIN {databaseOwner}[{objectQualifier}vw_University_EmployeesTotalWeight] AS EW
						ON E.EmployeeID = EW.EmployeeID
			WHERE E.IsPublished = 1 OR @includeNonPublished = 1
		) AS DE
		ORDER BY DE.TotalWeight DESC, DE.LastName;
	END
	ELSE IF (@sortType = 2)
	BEGIN
		-- Sort by employee lastname, then firstname
		SELECT DISTINCT E.*
			FROM {databaseOwner}[{objectQualifier}University_DivisionsHierarchy](@divisionId) AS DH
				INNER JOIN {databaseOwner}[{objectQualifier}University_OccupiedPositions] AS OP
					ON DH.DivisionID = OP.DivisionID
				INNER JOIN {databaseOwner}[{objectQualifier}University_Employees] AS E 
					ON E.EmployeeID = OP.EmployeeID
			WHERE OP.DivisionID = @divisionId AND (E.IsPublished = 1 OR @includeNonPublished = 1) 
		ORDER BY E.LastName;
	END
	ELSE -- IF (@sortType = 0)
	BEGIN
		-- Sort by max weight of all employee positions (by default)
		SELECT E.* FROM (
			SELECT EW.EmployeeID, 
				-- Add some weight to prime positions in the current division
				MAX (EW.MaxWeight + CASE WHEN (OP.DivisionID = @divisionId AND OP.IsPrime = 1) THEN @weightMod ELSE 0 END) AS MaxWeight
				FROM {databaseOwner}[{objectQualifier}University_DivisionsHierarchy](@divisionId) AS DH
					INNER JOIN {databaseOwner}[{objectQualifier}University_OccupiedPositions] AS OP
						ON DH.DivisionID = OP.DivisionID
					INNER JOIN {databaseOwner}[{objectQualifier}vw_University_EmployeesMaxWeight] AS EW
						ON EW.EmployeeID = OP.EmployeeID 
			WHERE EW.IsPublished = 1 OR @includeNonPublished = 1
			GROUP BY EW.EmployeeID
		) AS DE INNER JOIN {databaseOwner}[{objectQualifier}University_Employees] AS E ON DE.EmployeeID = E.EmployeeID 
		ORDER BY DE.MaxWeight DESC, E.LastName;
	END
END
GO
